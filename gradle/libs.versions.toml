[versions]
androidGradlePlugin = "8.11.0"
kotlin = "2.2.0"
ksp = "2.2.0-2.0.2"

jetbrainsCompose = "1.9.0-beta01"
material3 = "1.9.0-alpha04"
material3Adaptive = "1.1.2"

kotlinPoet = "2.2.0"
kotlinxSerialization = "1.9.0"
kotlinxCollectionsImmutable = "0.4.0"
kotlinxDatetime = "0.7.1"

androidxActivityCompose = "1.12.0-alpha04"
androidxNavigation3 = "1.0.0-alpha05"
androidxNavigation3Material = "1.0.0-SNAPSHOT"
androidxDatastore = "1.1.7"
androidxAppCompat = "1.7.1"
androidxTestCore = "1.6.1"
androidxBrowser = "1.8.0"

ktor = "3.2.1"
ktorfit = "2.6.2"

soil = "1.0.0-alpha12"

rin = "0.3.0"

metro = "0.5.2"

lifecycleCompose = "2.9.1"
lifecycleViewmodelNavigation3 = "1.0.0-SNAPSHOT"

robolectric = "4.15.1"

composeBom = "2025.07.00"
roborazzi = "1.48.0"
composablePreviewScanner = "0.6.1"
junit = "4.13.2"

twitterComposeRule = "0.0.26"
spotless = "7.2.1"
ktlint = "1.7.1"

navigationeventDesktop = "1.0.0-alpha04"

composeHotReload = "1.0.0-beta04"
coil = "3.2.0"
buildkonfig = "0.17.1"

haze = "1.6.9"

skie = "0.10.4"

molecule = "2.1.0"

navigationCompose = "2.9.0-beta04"

# >= 12.1.2 triggers a Kotlin MPP model failure during Gradle sync
# java.lang.IllegalStateException:
# The value for task ':app-shared:findLibraries' property 'offlineMode'
# is final and cannot be changed any further.
aboutLibraries = "12.1.1"

filekit = "0.10.0"
qrcodeKotlin = "4.3.0"

firebaseGradlePlugin = "4.4.3"
firebaseCrashlyticsGradlePlugin = "3.0.6"
firebaseCrashlytics = "19.4.4"

[libraries]
# gradle plugins
androidGradlePlugin = { module = "com.android.tools.build:gradle", version.ref = "androidGradlePlugin" }
kotlinGradlePlugin = { module = "org.jetbrains.kotlin:kotlin-gradle-plugin", version.ref = "kotlin" }
kspGradlePlugin = { module = "com.google.devtools.ksp:symbol-processing-gradle-plugin", version.ref = "ksp" }
jetbrainsComposeGradlePlugin = { module = "org.jetbrains.compose:compose-gradle-plugin", version.ref = "jetbrainsCompose" }
kotlinxSerializationGradlePlugin = { module = "org.jetbrains.kotlin:kotlin-serialization", version.ref = "kotlin" }
androidKotlinMultiplatformLibrary = { module = "com.android.kotlin.multiplatform.library:com.android.kotlin.multiplatform.library.gradle.plugin", version.ref = "androidGradlePlugin" }
composeCompilerGradlePlugin = { module = "org.jetbrains.kotlin:compose-compiler-gradle-plugin", version.ref = "kotlin" }
metroGradlePlugin = { module = "dev.zacsweers.metro:dev.zacsweers.metro.gradle.plugin", version.ref = "metro" }
roborazziGradlePlugin = { module = "io.github.takahirom.roborazzi:roborazzi-gradle-plugin", version.ref = "roborazzi" }
buildkonfigGradlePlugin = { module = "com.codingfeline.buildkonfig:buildkonfig-gradle-plugin", version.ref = "buildkonfig" }
skieGradlePlugin = { module = "co.touchlab.skie:co.touchlab.skie.gradle.plugin", version.ref = "skie" }
aboutLibrariesGradlePlugin = { module = "com.mikepenz.aboutlibraries.plugin:com.mikepenz.aboutlibraries.plugin.gradle.plugin", version.ref = "aboutLibraries" }
spotlessGradlePlugin = { module = "com.diffplug.spotless:spotless-plugin-gradle", version.ref = "spotless" }
firebaseGradlePlugin = { module = "com.google.gms:google-services", version.ref = "firebaseGradlePlugin" }
firebaseCrashlyticsGradlePlugin = { module = "com.google.firebase:firebase-crashlytics-gradle", version.ref = "firebaseCrashlyticsGradlePlugin" }

# ktor and ktorfit
ktorClientOkhttp = { module = "io.ktor:ktor-client-okhttp", version.ref = "ktor" }
ktorClientDarwin = { module = "io.ktor:ktor-client-darwin", version.ref = "ktor" }
ktorClientContentNegotiation = { module = "io.ktor:ktor-client-content-negotiation", version.ref = "ktor" }
ktorKotlinxSerializationJson = { module = "io.ktor:ktor-serialization-kotlinx-json", version.ref = "ktor" }
ktorfitLib = { module = "de.jensklingenberg.ktorfit:ktorfit-lib", version.ref = "ktorfit" }

# androidx
androidxDatastorePreferencesCore = { module = "androidx.datastore:datastore-preferences-core", version.ref = "androidxDatastore" }
androidxActivityCompose = { module = "androidx.activity:activity-compose", version.ref = "androidxActivityCompose" }
androidxAppCompat = { module = "androidx.appcompat:appcompat", version.ref = "androidxAppCompat" }
androidxTestCore = { module = "androidx.test:core", version.ref = "androidxTestCore" }
androidxBrowser = { module = "androidx.browser:browser", version.ref = "androidxBrowser" }

composeBom = { module = "androidx.compose:compose-bom", version.ref = "composeBom" }
androidxUiTestJunit4 = { module = "androidx.compose.ui:ui-test-junit4" }
androidxUiTestManifest = { module = "androidx.compose.ui:ui-test-manifest" }

# firebase
firebaseCrashlytics = { module = "com.google.firebase:firebase-crashlytics-ktx", version.ref = "firebaseCrashlytics" }

# kotlin
kotlinTest = { module = "org.jetbrains.kotlin:kotlin-test", version.ref = "kotlin" }
kotlinTestJunit = { module = "org.jetbrains.kotlin:kotlin-test-junit", version.ref = "kotlin" }

# kotlinx
kotlinxSerializationJson = { module = "org.jetbrains.kotlinx:kotlinx-serialization-json", version.ref = "kotlinxSerialization" }
kotlinxCollectionsImmutable = { module = "org.jetbrains.kotlinx:kotlinx-collections-immutable", version.ref = "kotlinxCollectionsImmutable" }
kotlinxDatetime = { module = "org.jetbrains.kotlinx:kotlinx-datetime", version.ref = "kotlinxDatetime" }

# soil
soilQueryCore = { module = "com.soil-kt.soil:query-core", version.ref = "soil" }
soilQueryCompose = { module = "com.soil-kt.soil:query-compose", version.ref = "soil" }
soilReacty = { module = "com.soil-kt.soil:reacty", version.ref = "soil" }
soilForm = { module = "com.soil-kt.soil:form", version.ref = "soil" }

# compiler
kspSymbolProcessingApi = { module = "com.google.devtools.ksp:symbol-processing-api", version.ref = "ksp" }
kotlinPoetKsp = { module = "com.squareup:kotlinpoet-ksp", version.ref = "kotlinPoet" }

rin = { module = "io.github.takahirom.rin:rin", version.ref = "rin" }
# roborazzi
roborazzi = { module = "io.github.takahirom.roborazzi:roborazzi", version.ref = "roborazzi" }
roborazziCompose = { module = "io.github.takahirom.roborazzi:roborazzi-compose", version.ref = "roborazzi" }
roborazziComposeDesktop = { module = "io.github.takahirom.roborazzi:roborazzi-compose-desktop", version.ref = "roborazzi" }
roborazziComposeIos = { module = "io.github.takahirom.roborazzi:roborazzi-compose-ios", version.ref = "roborazzi" }
roborazziPreviewScannerSupport = { module = "io.github.takahirom.roborazzi:roborazzi-compose-preview-scanner-support", version.ref = "roborazzi" }
composablePreviewScannerAndroid = { module = "io.github.sergio-sastre.ComposablePreviewScanner:android", version.ref = "composablePreviewScanner" }
composablePreviewScannerJvm = { module = "io.github.sergio-sastre.ComposablePreviewScanner:jvm", version.ref = "composablePreviewScanner" }
junit = { module = "junit:junit", version.ref = "junit" }

# navigation3
navigation3Ui = { module = "androidx.navigation3:navigation3-ui", version.ref = "androidxNavigation3" }
navigation3Runtime = { module = "androidx.navigation3:navigation3-runtime", version.ref = "androidxNavigation3" }
navigation3Adaptive = { module = "androidx.compose.material3.adaptive:adaptive-navigation3", version.ref = "androidxNavigation3Material" }

lifecycleViewmodelCompose = { module = "org.jetbrains.androidx.lifecycle:lifecycle-viewmodel-compose", version.ref = "lifecycleCompose" }
lifecycleRuntimeCompose = { module = "org.jetbrains.androidx.lifecycle:lifecycle-runtime-compose", version.ref = "lifecycleCompose" }
lifecycleViewmodelNavigation3 = { module = "androidx.lifecycle:lifecycle-viewmodel-navigation3", version.ref = "lifecycleViewmodelNavigation3" }

robolectric = { module = "org.robolectric:robolectric", version.ref = "robolectric" }

navigationeventDesktop = { group = "androidx.navigationevent", name = "navigationevent-desktop", version.ref = "navigationeventDesktop" }

# coil
coil = { module = "io.coil-kt.coil3:coil-compose", version.ref = "coil" }
coilNetwork = { module = "io.coil-kt.coil3:coil-network-ktor3", version.ref = "coil" }
coilTest = { module = "io.coil-kt.coil3:coil-test", version.ref = "coil" }

haze = { module = "dev.chrisbanes.haze:haze", version.ref = "haze" }
material3 = { module = "org.jetbrains.compose.material3:material3", version.ref = "material3" }
material3Adaptive = { module = "org.jetbrains.compose.material3.adaptive:adaptive", version.ref = "material3Adaptive" }

buildkonfigCompiler = { module = "com.codingfeline.buildkonfig:buildkonfig-compiler", version.ref = "buildkonfig" }

molecule = { module = "app.cash.molecule:molecule-runtime", version.ref = "molecule" }

navigationCompose = { module = "org.jetbrains.androidx.navigation:navigation-compose", version.ref = "navigationCompose" }

aboutLibrariesComposeM3 = { module = "com.mikepenz:aboutlibraries-compose-m3", version.ref = "aboutLibraries" }

filekitDialogsCompose = { module = "io.github.vinceglb:filekit-dialogs-compose", version.ref = "filekit" }
filekitCoil = { module = "io.github.vinceglb:filekit-coil", version.ref = "filekit" }

qrcodeKotlin = { module = "io.github.g0dkar:qrcode-kotlin", version.ref = "qrcodeKotlin" }

[plugins]
kotlinMultiplatform = { id = "org.jetbrains.kotlin.multiplatform", version.ref = "kotlin" }
kotlinAndroid = { id = "org.jetbrains.kotlin.android", version.ref = "kotlin" }
kotlinJvm = { id = "org.jetbrains.kotlin.jvm", version.ref = "kotlin" }
kotlinxSerialization = { id = "org.jetbrains.kotlin.plugin.serialization", version.ref = "kotlin" }
composeCompiler = { id = "org.jetbrains.kotlin.plugin.compose", version.ref = "kotlin" }
androidApplication = { id = "com.android.application", version.ref = "androidGradlePlugin" }
androidLibrary = { id = "com.android.library", version.ref = "androidGradlePlugin" }
androidKotlinMultiplatformLibrary = { id = "com.android.kotlin.multiplatform.library", version.ref = "androidGradlePlugin" }
ksp = { id = "com.google.devtools.ksp", version.ref = "ksp" }
ktorfit = { id = "de.jensklingenberg.ktorfit", version.ref = "ktorfit" }
jetbrainsCompose = { id = "org.jetbrains.compose", version.ref = "jetbrainsCompose" }
metro = { id = "dev.zacsweers.metro", version.ref = "metro" }
roborazzi = { id = "io.github.takahirom.roborazzi", version.ref = "roborazzi" }
composeHotReload = { id = "org.jetbrains.compose.hot-reload", version.ref = "composeHotReload" }
aboutLibraries = { id = "com.mikepenz.aboutlibraries.plugin", version.ref = "aboutLibraries" }
spotless = { id = "com.diffplug.spotless", version.ref = "spotless" }

[bundles]
plugins = [
    "kotlinGradlePlugin",
    "jetbrainsComposeGradlePlugin",
    "kotlinxSerializationGradlePlugin",
    "androidKotlinMultiplatformLibrary",
    "kspGradlePlugin",
    "composeCompilerGradlePlugin",
    "androidGradlePlugin",
    "metroGradlePlugin",
    "roborazziGradlePlugin",
    "buildkonfigGradlePlugin",
    "skieGradlePlugin",
    "aboutLibrariesGradlePlugin",
    "spotlessGradlePlugin",
    "firebaseGradlePlugin",
    "firebaseCrashlyticsGradlePlugin",
]
